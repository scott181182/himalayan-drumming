// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}



model FileType {
    name String @id

    entries FileEntry[]
}

model FileEntry {
    id String @id @default(cuid())
    /// Virtual path, in the application.
    path String @unique
    name String
    /// Endpoint the file can be retrieved at.
    url String?

    type String
    parentId String?

    typeRef FileType @relation(fields: [type], references: [name])
    parent FileEntry? @relation("ParentChildren", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    children FileEntry[] @relation("ParentChildren")

    metadata FileMetadata?
    withTags TagOnFile[]
    people Person[]

    associatedFiles1 FileAssociations[] @relation("File1Associations")
    associatedFiles2 FileAssociations[] @relation("File2Associations")

    @@index([parentId])
}

model FileAssociations {
    file1Id String
    file1 FileEntry @relation("File1Associations", fields: [file1Id], references: [id])
    file2Id String
    file2 FileEntry @relation("File2Associations", fields: [file2Id], references: [id])

    @@id([file1Id, file2Id])
}

model FileMetadata {
    fileId String @id
    file FileEntry @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    locationId String?
    location LatLng? @relation(fields: [locationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

/// Manual Join table to avoid automatic cascades
model TagOnFile {
    tagName String
    fileId String

    tag Tag @relation(fields: [tagName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    file FileEntry @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([tagName, fileId])
}
model Tag {
    name String @id

    onFiles TagOnFile[]
}

model LatLng {
    id String @id @default(cuid())
    latitude Float
    longitude Float

    metadata FileMetadata[]
    villages Village[]
}



model Person {
    id String @id @default(cuid())
    name String
    avatarUrl String?

    parent Person? @relation("ParentChild", fields: [parentId], references: [id])
    parentId String?

    children Person[] @relation("ParentChild")
    villages PersonInVillage[]
    files FileEntry[]
}
model Village {
    id String @id @default(cuid())
    name String

    location LatLng @relation(fields: [locationId], references: [id])
    locationId String

    people PersonInVillage[]
}

model PersonInVillage {
    /// The person's relation to the village
    description String?

    person Person @relation(fields: [personId], references: [id])
    personId String
    village Village @relation(fields: [villageId], references: [id])
    villageId String

    @@id([personId, villageId])
}
