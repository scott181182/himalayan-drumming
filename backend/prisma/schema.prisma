// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

///////////////
//   Enums   //
///////////////

model FileType {
    name String @id

    entries FileEntry[]
}

model Caste {
    name String @id

    members Person[]
}

model Gender {
    name String @id

    people Person[]
}

/////////////////////
//   File Models   //
/////////////////////

model FileEntry {
    id   String  @id @default(cuid())
    /// Virtual path, in the application.
    path String  @unique
    name String
    /// Endpoint the file can be retrieved at.
    url  String?

    type     String
    parentId String?

    notes String?
    timestamp DateTime?

    locationId String?
    location   LatLng? @relation(fields: [locationId], references: [id], onDelete: SetNull, onUpdate: Cascade)

    typeRef FileType   @relation(fields: [type], references: [name])
    parent  FileEntry? @relation("ParentChildren", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    children FileEntry[] @relation("ParentChildren")

    withTags TagOnFile[]
    people   PersonOnFile[]

    associatedFiles1 FileAssociations[] @relation("File1Associations")
    associatedFiles2 FileAssociations[] @relation("File2Associations")

    @@index([parentId])
}

/// JOIN Table for file entries.
model FileAssociations {
    file1Id String
    file1   FileEntry @relation("File1Associations", fields: [file1Id], references: [id])
    file2Id String
    file2   FileEntry @relation("File2Associations", fields: [file2Id], references: [id])

    @@id([file1Id, file2Id])
}

/// Manual Join table to avoid automatic cascades
model TagOnFile {
    tagName String
    fileId  String

    tag  Tag       @relation(fields: [tagName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    file FileEntry @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([tagName, fileId])
}

model Tag {
    name String @id

    onFiles TagOnFile[]
}

model LatLng {
    id        String @id @default(cuid())
    latitude  Float
    longitude Float

    metadata FileEntry[]
    villages Village[]
}

///////////////////////
//   Person Models   //
///////////////////////

model Person {
    id        String  @id @default(cuid())
    name      String
    avatarUrl String?

    birthdate DateTime?
    education String?
    notes     String?

    parent   Person? @relation("ParentChild", fields: [parentId], references: [id])
    parentId String?

    gender    String?
    genderRef Gender? @relation(fields: [gender], references: [name])
    caste     String?
    casteRef  Caste?  @relation(fields: [caste], references: [name])

    children Person[]          @relation("ParentChild")
    villages PersonInVillage[]
    files    PersonOnFile[]
}

model Village {
    id         String  @id @default(cuid())
    name       String
    temples    String?
    divinities String?
    rituals    String?
    notes      String?

    location   LatLng @relation(fields: [locationId], references: [id])
    locationId String

    people PersonInVillage[]
}

/// JOIN table for associations between Villages and People.
model PersonInVillage {
    /// The person's relation to the village.
    description String?

    person    Person  @relation(fields: [personId], references: [id])
    personId  String
    village   Village @relation(fields: [villageId], references: [id])
    villageId String

    @@id([personId, villageId])
}

/// JOIN table for associations between Files and People.
model PersonOnFile {
    /// What instrument the person played in the recording, if applicable.
    instrument String?
    notes String?
    
    personId  String
    person    Person  @relation(fields: [personId], references: [id])
    fileId String
    file   FileEntry @relation(fields: [fileId], references: [id])
    
    @@id([personId, fileId])
}